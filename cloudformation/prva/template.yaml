AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  (SHOWCASE ONLY - NO API GATEWAY) CloudFormation template based on the 'Intro' text,
  defining backend resources WITHOUT API Gateway. Includes Lambda (placeholders),
  DynamoDB, and Cognito. Lambdas have NO triggers defined in this template.

Parameters:
  ProjectName:
    Type: String
    Default: SimpleBackendResources
    Description: A prefix for resource names to ensure uniqueness and grouping.

Resources:
  # --- DynamoDB Tables (as described in Intro) ---
  CustomersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-Customers'
      AttributeDefinitions:
        - AttributeName: userId # Typically Cognito Sub
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST # Cost-effective for startups
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-Orders'
      AttributeDefinitions:
        - AttributeName: orderId # Unique ID for the order
          AttributeType: S
        - AttributeName: userId # To link order to a customer
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      # Global Secondary Index to query orders by customer (userId)
      GlobalSecondaryIndexes:
        - IndexName: UserOrdersIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL # Project all attributes for simplicity
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  FeedbackTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-Feedback'
      AttributeDefinitions:
        - AttributeName: feedbackId # Unique ID for the feedback
          AttributeType: S
        - AttributeName: userId # Optional: To link feedback to user
          AttributeType: S
      KeySchema:
        - AttributeName: feedbackId
          KeyType: HASH
      # Optional: Add GSI on userId if needed to query feedback by user
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # --- Cognito User Pool for Authentication (Required for login/register) ---
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${ProjectName}-UserPool'
      Schema: # Basic schema with email as username
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      Policies: # Basic password policy
        PasswordPolicy:
          MinimumLength: 8
      AutoVerifiedAttributes: [email] # Users verify via email
      UsernameAttributes: [email] # Use email to log in
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${ProjectName}-WebAppClient'
      UserPoolId: !Ref UserPool
      GenerateSecret: false # Typically false for web/mobile clients
      ExplicitAuthFlows: # Standard flows for web apps
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED # Good security practice

  # --- IAM Role for Lambda Functions (Single role for initial simplicity) ---
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-LambdaExecutionRole-Basic'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        # Policy for DynamoDB Access to all project tables
        - PolicyName: !Sub '${ProjectName}-LambdaDynamoDBPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: # Grant access to all defined tables
                  - !GetAtt CustomersTable.Arn
                  - !GetAtt OrdersTable.Arn
                  - !Sub '${OrdersTable.Arn}/index/*' # Access GSI too
                  - !GetAtt FeedbackTable.Arn
        # Policy for Cognito User Pool actions needed by auth lambdas
        - PolicyName: !Sub '${ProjectName}-LambdaCognitoPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminGetUser # To check user details
                  - cognito-idp:AdminInitiateAuth # For login
                  - cognito-idp:AdminRespondToAuthChallenge # For login flow
                  - cognito-idp:SignUp # For registration
                  - cognito-idp:ConfirmSignUp # For registration confirmation
                Resource: !GetAtt UserPool.Arn
        # Basic policy for CloudWatch Logs
        - PolicyName: !Sub '${ProjectName}-LambdaCloudWatchPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # --- Lambda Functions (Python Placeholders - NO TRIGGERS DEFINED) ---
  SharedPlaceholderFunctionCode: &SharedPlaceholderFunctionCode |-
    # Placeholder Python 3.11 code for Lambda functions
    import json
    import os
    import logging

    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    def lambda_handler(event, context):
        function_name = context.function_name
        logger.info(f"Placeholder function '{function_name}' invoked.")
        logger.info(f"Note: This function has no API Gateway or other trigger defined in CloudFormation.")
        logger.info("Received event: " + json.dumps(event, indent=2))

        # Example accessing environment variables
        # customers_table = os.environ.get('CUSTOMERS_TABLE_NAME', 'N/A')
        # ... other env vars

        # --- NO ACTUAL BUSINESS LOGIC ---

        return {
            'statusCode': 200,
            # 'headers' are usually for API Gateway responses, less relevant here
            'body': json.dumps({
                'message': f'Placeholder success from {function_name} (No action taken)',
                'received_event': event
            })
        }

  # Function for User Registration
  RegisterUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-RegisterUser'
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: *SharedPlaceholderFunctionCode
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref UserPool
          COGNITO_CLIENT_ID: !Ref UserPoolClient
          CUSTOMERS_TABLE_NAME: !Ref CustomersTable
      Timeout: 10
      MemorySize: 128
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # Function for User Login
  LoginUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-LoginUser'
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: *SharedPlaceholderFunctionCode
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref UserPool
          COGNITO_CLIENT_ID: !Ref UserPoolClient
      Timeout: 10
      MemorySize: 128
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # Function to Create an Order
  CreateOrderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-CreateOrder'
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: *SharedPlaceholderFunctionCode
      Environment:
        Variables:
          ORDERS_TABLE_NAME: !Ref OrdersTable
      Timeout: 10
      MemorySize: 128
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # Function to Get Orders (likely for the logged-in user)
  GetOrdersFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-GetOrders'
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: *SharedPlaceholderFunctionCode
      Environment:
        Variables:
          ORDERS_TABLE_NAME: !Ref OrdersTable
          ORDERS_INDEX_NAME: UserOrdersIndex
      Timeout: 10
      MemorySize: 128
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # Function to Get Specific Order Details/Status
  GetOrderDetailsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-GetOrderDetails'
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: *SharedPlaceholderFunctionCode
      Environment:
        Variables:
          ORDERS_TABLE_NAME: !Ref OrdersTable
      Timeout: 10
      MemorySize: 128
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # Function to Submit Feedback
  SubmitFeedbackFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-SubmitFeedback'
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: *SharedPlaceholderFunctionCode
      Environment:
        Variables:
          FEEDBACK_TABLE_NAME: !Ref FeedbackTable
      Timeout: 10
      MemorySize: 128
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # Function for Basic Internal Analytics/KPIs
  GetAnalyticsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-GetAnalytics'
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: *SharedPlaceholderFunctionCode
      Environment:
        Variables:
          ORDERS_TABLE_NAME: !Ref OrdersTable
          CUSTOMERS_TABLE_NAME: !Ref CustomersTable
      Timeout: 20
      MemorySize: 128
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # --- NO API GATEWAY RESOURCES DEFINED ---
  # --- NO LAMBDA PERMISSIONS FOR API GATEWAY DEFINED ---

Outputs:
  # No API Endpoint Output as API Gateway is not defined
  CognitoUserPoolId:
    Description: ID of the Cognito User Pool created
    Value: !Ref UserPool
  CognitoUserPoolClientId:
    Description: ID of the Cognito User Pool Client created
    Value: !Ref UserPoolClient
  CustomersTableName:
    Description: Name of the DynamoDB table for Customers
    Value: !Ref CustomersTable
  OrdersTableName:
    Description: Name of the DynamoDB table for Orders
    Value: !Ref OrdersTable
  FeedbackTableName:
    Description: Name of the DynamoDB table for Feedback
    Value: !Ref FeedbackTable
  LambdaExecutionRoleArn:
    Description: ARN of the basic IAM Role used by Lambda functions
    Value: !GetAtt LambdaExecutionRole.Arn