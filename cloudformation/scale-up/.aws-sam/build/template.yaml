AWSTemplateFormatVersion: '2010-09-09'
Description: (SHOWCASE ONLY - NO FUNCTIONAL LOGIC) CloudFormation template demonstrating
  a scaled serverless backend structure based on the "Maturation" text. Includes API
  Gateway, Lambda (placeholders with specific roles), DynamoDB, Cognito, Step Functions,
  RDS (PostgreSQL), ElastiCache (Redis), and basic VPC. Lambdas are non-functional
  placeholders.
Parameters:
  ProjectName:
    Type: String
    Description: A prefix for resource names to ensure uniqueness and grouping.
  DbPasswordSecretName:
    Type: String
    Description: Name for the RDS database master password secret in Secrets Manager.
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${ProjectName}-VPC
      - Key: Project
        Value:
          Ref: ProjectName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${ProjectName}-PublicSubnetA
      - Key: Project
        Value:
          Ref: ProjectName
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${ProjectName}-PublicSubnetB
      - Key: Project
        Value:
          Ref: ProjectName
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetA
      RouteTableId:
        Ref: RouteTable
  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetB
      RouteTableId:
        Ref: RouteTable
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${ProjectName}-LambdaSG
      GroupDescription: Security group for Lambda functions running in VPC
      VpcId:
        Ref: VPC
      SecurityGroupEgress:
      - CidrIp: '0.0.0.0/0'
        IpProtocol: -1
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  ElastiCacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${ProjectName}-ElastiCacheSG
      GroupDescription: Security group for ElastiCache Redis Cluster
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 6379
        ToPort: 6379
        SourceSecurityGroupId:
          Ref: LambdaSecurityGroup
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${ProjectName}-RDSSG
      GroupDescription: Security group for RDS PostgreSQL Instance
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId:
          Ref: LambdaSecurityGroup
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  CustomersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${ProjectName}-Customers
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      KeySchema:
      - AttributeName: userId
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${ProjectName}-Orders
      AttributeDefinitions:
      - AttributeName: orderId
        AttributeType: S
      - AttributeName: userId
        AttributeType: S
      KeySchema:
      - AttributeName: orderId
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: UserOrdersIndex
        KeySchema:
        - AttributeName: userId
          KeyType: HASH
        Projection:
          ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  FeedbackTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${ProjectName}-Feedback
      AttributeDefinitions:
      - AttributeName: feedbackId
        AttributeType: S
      KeySchema:
      - AttributeName: feedbackId
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: ${ProjectName}-UserPool
      Schema:
      - Name: email
        AttributeDataType: String
        Mutable: true
        Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      AutoVerifiedAttributes:
      - email
      UsernameAttributes:
      - email
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        Fn::Sub: ${ProjectName}-WebAppClient
      UserPoolId:
        Ref: UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
      - ALLOW_USER_SRP_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for ElastiCache cluster
      SubnetIds:
      - Ref: PublicSubnetA
      - Ref: PublicSubnetB
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  RedisCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t3.micro
      Engine: redis
      NumCacheNodes: 1
      CacheSubnetGroupName:
        Ref: ElastiCacheSubnetGroup
      VpcSecurityGroupIds:
      - Fn::GetAtt:
        - ElastiCacheSecurityGroup
        - GroupId
      ClusterName:
        Fn::Sub: ${ProjectName}-redis-cluster
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  RDSDbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instance
      SubnetIds:
      - Ref: PublicSubnetA
      - Ref: PublicSubnetB
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  DBPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Ref: DbPasswordSecretName
      Description:
        Fn::Sub: Password for ${ProjectName} RDS instance
      GenerateSecretString:
        SecretStringTemplate: '{"username": "dbadmin"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludePunctuation: true
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  AnalyticsDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier:
        Fn::Sub: ${ProjectName}-analytics-db
      DBName:
        Fn::Sub: ${ProjectName}AnalyticsDB
      Engine: postgres
      EngineVersion: '15'
      DBInstanceClass: db.t3.micro
      AllocatedStorage: '20'
      MasterUsername:
        Fn::Join:
        - ''
        - - '{{resolve:secretsmanager:'
          - Ref: DBPasswordSecret
          - :SecretString:username}}
      MasterUserPassword:
        Fn::Join:
        - ''
        - - '{{resolve:secretsmanager:'
          - Ref: DBPasswordSecret
          - :SecretString:password}}
      DBSubnetGroupName:
        Ref: RDSDbSubnetGroup
      VPCSecurityGroups:
      - Fn::GetAtt:
        - RDSSecurityGroup
        - GroupId
      PubliclyAccessible: false
      StorageType: gp3
      BackupRetentionPeriod: 7
      DeleteAutomatedBackups: true
      DeletionProtection: false
      CopyTagsToSnapshot: true
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
    DeletionPolicy: Snapshot
  AuthLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${ProjectName}-AuthLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Sub: ${ProjectName}-AuthLambdaBasePolicy
      - PolicyName:
          Fn::Sub: ${ProjectName}-AuthLambdaCognitoPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminRespondToAuthChallenge
            - cognito-idp:SignUp
            - cognito-idp:ConfirmSignUp
            Resource:
              Fn::GetAtt:
              - UserPool
              - Arn
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            Resource:
              Fn::GetAtt:
              - CustomersTable
              - Arn
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  OrderLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${ProjectName}-OrderLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Sub: ${ProjectName}-OrderLambdaDynamoDBPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            Resource:
            - Fn::GetAtt:
              - OrdersTable
              - Arn
            - Fn::Sub: ${OrdersTable.Arn}/index/UserOrdersIndex
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  FeedbackLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${ProjectName}-FeedbackLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Sub: ${ProjectName}-FeedbackLambdaDynamoDBPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            Resource:
              Fn::GetAtt:
              - FeedbackTable
              - Arn
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  AnalyticsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${ProjectName}-AnalyticsLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Sub: ${ProjectName}-AnalyticsLambdaDynamoDBPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            Resource:
            - Fn::GetAtt:
              - CustomersTable
              - Arn
            - Fn::GetAtt:
              - OrdersTable
              - Arn
            - Fn::Sub: ${OrdersTable.Arn}/index/*
      - PolicyName:
          Fn::Sub: ${ProjectName}-AnalyticsLambdaRDSPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource:
              Ref: DBPasswordSecret
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  PaymentStepLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${ProjectName}-PaymentStepLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${ProjectName}-StateMachineRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              Fn::Sub: states.${AWS::Region}.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Sub: ${ProjectName}-StateMachineLambdaInvokePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
            - Fn::GetAtt:
              - PaymentStepLambdaFunction
              - Arn
      - PolicyName:
          Fn::Sub: ${ProjectName}-StateMachineXRayPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
            - xray:GetSamplingRules
            - xray:GetSamplingTargets
            Resource: '*'
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  RegisterUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectName}-RegisterUser
      Handler: index.lambda_handler
      Runtime: python3.11
      Role:
        Fn::GetAtt:
        - AuthLambdaRole
        - Arn
      Code:
        ZipFile: "import json\nimport os\nimport logging\n\nlogger = logging.getLogger()\n\
          logger.setLevel(logging.INFO)\n\ndef lambda_handler(event, context):\n \
          \   logger.info(f\"Placeholder function '{context.function_name}' invoked.\"\
          )\n    logger.info(\"Received event: \" + json.dumps(event, indent=2))\n\
          \    return {\n        'statusCode': 200,\n        'headers': {\n      \
          \      'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin':\
          \ '*'\n        },\n        'body': json.dumps({\n            'message':\
          \ f'Placeholder success from {context.function_name}',\n            'received_event':\
          \ event\n        })\n    }"
      Environment:
        Variables:
          COGNITO_USER_POOL_ID:
            Ref: UserPool
          COGNITO_CLIENT_ID:
            Ref: UserPoolClient
          CUSTOMERS_TABLE_NAME:
            Ref: CustomersTable
      Timeout: 15
      MemorySize: 128
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
        - Ref: LambdaSecurityGroup
        SubnetIds:
        - Ref: PublicSubnetA
        - Ref: PublicSubnetB
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  LoginUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectName}-LoginUser
      Handler: index.lambda_handler
      Runtime: python3.11
      Role:
        Fn::GetAtt:
        - AuthLambdaRole
        - Arn
      Code:
        ZipFile: "import json\nimport os\nimport logging\n\nlogger = logging.getLogger()\n\
          logger.setLevel(logging.INFO)\n\ndef lambda_handler(event, context):\n \
          \   logger.info(f\"Placeholder function '{context.function_name}' invoked.\"\
          )\n    logger.info(\"Received event: \" + json.dumps(event, indent=2))\n\
          \    return {\n        'statusCode': 200,\n        'headers': {\n      \
          \      'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin':\
          \ '*'\n        },\n        'body': json.dumps({\n            'message':\
          \ f'Placeholder success from {context.function_name}',\n            'received_event':\
          \ event\n        })\n    }"
      Environment:
        Variables:
          COGNITO_USER_POOL_ID:
            Ref: UserPool
          COGNITO_CLIENT_ID:
            Ref: UserPoolClient
      Timeout: 15
      MemorySize: 128
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
        - Ref: LambdaSecurityGroup
        SubnetIds:
        - Ref: PublicSubnetA
        - Ref: PublicSubnetB
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  CreateOrderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectName}-CreateOrder
      Handler: index.lambda_handler
      Runtime: python3.11
      Role:
        Fn::GetAtt:
        - OrderLambdaRole
        - Arn
      Code:
        ZipFile: "import json\nimport os\nimport logging\n\nlogger = logging.getLogger()\n\
          logger.setLevel(logging.INFO)\n\ndef lambda_handler(event, context):\n \
          \   logger.info(f\"Placeholder function '{context.function_name}' invoked.\"\
          )\n    logger.info(\"Received event: \" + json.dumps(event, indent=2))\n\
          \    return {\n        'statusCode': 200,\n        'headers': {\n      \
          \      'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin':\
          \ '*'\n        },\n        'body': json.dumps({\n            'message':\
          \ f'Placeholder success from {context.function_name}',\n            'received_event':\
          \ event\n        })\n    }"
      Environment:
        Variables:
          TABLE_NAME:
            Ref: OrdersTable
          REDIS_ENDPOINT:
            Fn::GetAtt:
            - RedisCacheCluster
            - RedisEndpoint.Address
          REDIS_PORT:
            Fn::GetAtt:
            - RedisCacheCluster
            - RedisEndpoint.Port
      Timeout: 15
      MemorySize: 128
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
        - Ref: LambdaSecurityGroup
        SubnetIds:
        - Ref: PublicSubnetA
        - Ref: PublicSubnetB
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  GetOrdersFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectName}-GetOrders
      Handler: index.lambda_handler
      Runtime: python3.11
      Role:
        Fn::GetAtt:
        - OrderLambdaRole
        - Arn
      Code:
        ZipFile: "import json\nimport os\nimport logging\n\nlogger = logging.getLogger()\n\
          logger.setLevel(logging.INFO)\n\ndef lambda_handler(event, context):\n \
          \   logger.info(f\"Placeholder function '{context.function_name}' invoked.\"\
          )\n    logger.info(\"Received event: \" + json.dumps(event, indent=2))\n\
          \    return {\n        'statusCode': 200,\n        'headers': {\n      \
          \      'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin':\
          \ '*'\n        },\n        'body': json.dumps({\n            'message':\
          \ f'Placeholder success from {context.function_name}',\n            'received_event':\
          \ event\n        })\n    }"
      Environment:
        Variables:
          TABLE_NAME:
            Ref: OrdersTable
          INDEX_NAME: UserOrdersIndex
          REDIS_ENDPOINT:
            Fn::GetAtt:
            - RedisCacheCluster
            - RedisEndpoint.Address
          REDIS_PORT:
            Fn::GetAtt:
            - RedisCacheCluster
            - RedisEndpoint.Port
      Timeout: 15
      MemorySize: 128
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
        - Ref: LambdaSecurityGroup
        SubnetIds:
        - Ref: PublicSubnetA
        - Ref: PublicSubnetB
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  GetOrderDetailsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectName}-GetOrderDetails
      Handler: index.lambda_handler
      Runtime: python3.11
      Role:
        Fn::GetAtt:
        - OrderLambdaRole
        - Arn
      Code:
        ZipFile: "import json\nimport os\nimport logging\n\nlogger = logging.getLogger()\n\
          logger.setLevel(logging.INFO)\n\ndef lambda_handler(event, context):\n \
          \   logger.info(f\"Placeholder function '{context.function_name}' invoked.\"\
          )\n    logger.info(\"Received event: \" + json.dumps(event, indent=2))\n\
          \    return {\n        'statusCode': 200,\n        'headers': {\n      \
          \      'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin':\
          \ '*'\n        },\n        'body': json.dumps({\n            'message':\
          \ f'Placeholder success from {context.function_name}',\n            'received_event':\
          \ event\n        })\n    }"
      Environment:
        Variables:
          TABLE_NAME:
            Ref: OrdersTable
          REDIS_ENDPOINT:
            Fn::GetAtt:
            - RedisCacheCluster
            - RedisEndpoint.Address
          REDIS_PORT:
            Fn::GetAtt:
            - RedisCacheCluster
            - RedisEndpoint.Port
      Timeout: 15
      MemorySize: 128
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
        - Ref: LambdaSecurityGroup
        SubnetIds:
        - Ref: PublicSubnetA
        - Ref: PublicSubnetB
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  SubmitFeedbackFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectName}-SubmitFeedback
      Handler: index.lambda_handler
      Runtime: python3.11
      Role:
        Fn::GetAtt:
        - FeedbackLambdaRole
        - Arn
      Code:
        ZipFile: "import json\nimport os\nimport logging\n\nlogger = logging.getLogger()\n\
          logger.setLevel(logging.INFO)\n\ndef lambda_handler(event, context):\n \
          \   logger.info(f\"Placeholder function '{context.function_name}' invoked.\"\
          )\n    logger.info(\"Received event: \" + json.dumps(event, indent=2))\n\
          \    return {\n        'statusCode': 200,\n        'headers': {\n      \
          \      'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin':\
          \ '*'\n        },\n        'body': json.dumps({\n            'message':\
          \ f'Placeholder success from {context.function_name}',\n            'received_event':\
          \ event\n        })\n    }"
      Environment:
        Variables:
          TABLE_NAME:
            Ref: FeedbackTable
      Timeout: 15
      MemorySize: 128
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
        - Ref: LambdaSecurityGroup
        SubnetIds:
        - Ref: PublicSubnetA
        - Ref: PublicSubnetB
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  GetAnalyticsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectName}-GetAnalytics
      Handler: index.lambda_handler
      Runtime: python3.11
      Role:
        Fn::GetAtt:
        - AnalyticsLambdaRole
        - Arn
      Code:
        ZipFile: "import json\nimport os\nimport logging\n\nlogger = logging.getLogger()\n\
          logger.setLevel(logging.INFO)\n\ndef lambda_handler(event, context):\n \
          \   logger.info(f\"Placeholder function '{context.function_name}' invoked.\"\
          )\n    logger.info(\"Received event: \" + json.dumps(event, indent=2))\n\
          \    return {\n        'statusCode': 200,\n        'headers': {\n      \
          \      'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin':\
          \ '*'\n        },\n        'body': json.dumps({\n            'message':\
          \ f'Placeholder success from {context.function_name}',\n            'received_event':\
          \ event\n        })\n    }"
      Environment:
        Variables:
          ORDERS_TABLE:
            Ref: OrdersTable
          CUSTOMERS_TABLE:
            Ref: CustomersTable
          RDS_ENDPOINT:
            Fn::GetAtt:
            - AnalyticsDBInstance
            - Endpoint.Address
          RDS_PORT:
            Fn::GetAtt:
            - AnalyticsDBInstance
            - Endpoint.Port
          RDS_DB_NAME:
            Fn::Sub: ${ProjectName}AnalyticsDB
          RDS_SECRET_ARN:
            Ref: DBPasswordSecret
      Timeout: 60
      MemorySize: 256
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
        - Ref: LambdaSecurityGroup
        SubnetIds:
        - Ref: PublicSubnetA
        - Ref: PublicSubnetB
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  PaymentStepLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectName}-PaymentStepPlaceholder
      Handler: index.lambda_handler
      Runtime: python3.11
      Role:
        Fn::GetAtt:
        - PaymentStepLambdaRole
        - Arn
      Code:
        ZipFile: "import json\nimport os\nimport logging\n\nlogger = logging.getLogger()\n\
          logger.setLevel(logging.INFO)\n\ndef lambda_handler(event, context):\n \
          \   logger.info(f\"Placeholder function '{context.function_name}' invoked.\"\
          )\n    logger.info(\"Received event: \" + json.dumps(event, indent=2))\n\
          \    return {\n        'statusCode': 200,\n        'headers': {\n      \
          \      'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin':\
          \ '*'\n        },\n        'body': json.dumps({\n            'message':\
          \ f'Placeholder success from {context.function_name}',\n            'received_event':\
          \ event\n        })\n    }"
      Environment:
        Variables:
          EXAMPLE_VAR: PaymentStepValue
      Timeout: 30
      MemorySize: 128
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
        - Ref: LambdaSecurityGroup
        SubnetIds:
        - Ref: PublicSubnetA
        - Ref: PublicSubnetB
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  PaymentProcessingStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName:
        Fn::Sub: ${ProjectName}-PaymentProcessor
      RoleArn:
        Fn::GetAtt:
        - StateMachineRole
        - Arn
      DefinitionString:
        Fn::Sub: "{\n  \"Comment\": \"Placeholder Payment Processing Workflow based\
          \ on Scale-up text\",\n  \"StartAt\": \"ValidatePayment\",\n  \"States\"\
          : {\n    \"ValidatePayment\": {\n      \"Type\": \"Task\",\n      \"Resource\"\
          : \"${PaymentStepLambdaFunction.Arn}\",\n      \"Next\": \"ProcessExternally\"\
          \n    },\n    \"ProcessExternally\": {\n      \"Type\": \"Task\",\n    \
          \  \"Resource\": \"${PaymentStepLambdaFunction.Arn}\",\n      \"Retry\"\
          : [{\n        \"ErrorEquals\": [\"States.TaskFailed\"],\n        \"IntervalSeconds\"\
          : 3,\n        \"MaxAttempts\": 2,\n        \"BackoffRate\": 1.5\n      }],\n\
          \      \"Catch\": [{\n        \"ErrorEquals\": [\"States.ALL\"],\n     \
          \   \"Next\": \"PaymentFailedNotification\"\n      }],\n      \"Next\":\
          \ \"UpdateOrderStatus\"\n    },\n    \"UpdateOrderStatus\": {\n      \"\
          Type\": \"Task\",\n      \"Resource\": \"${PaymentStepLambdaFunction.Arn}\"\
          ,\n      \"End\": true\n    },\n    \"PaymentFailedNotification\": {\n \
          \     \"Type\": \"Task\",\n      \"Resource\": \"${PaymentStepLambdaFunction.Arn}\"\
          ,\n      \"End\": true\n    }\n  }\n}"
      TracingConfiguration:
        Enabled: true
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Sub: ${ProjectName}-Api
      Description: (SHOWCASE ONLY) Scaled API structure for Serverless App
      EndpointConfiguration:
        Types:
        - REGIONAL
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name:
        Fn::Sub: ${ProjectName}-CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId:
        Ref: RestApi
      ProviderARNs:
      - Fn::GetAtt:
        - UserPool
        - Arn
  RootOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId:
        Fn::GetAtt:
        - RestApi
        - RootResourceId
      RestApiId:
        Ref: RestApi
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
  RegisterResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Fn::GetAtt:
        - RestApi
        - RootResourceId
      PathPart: register
  RegisterPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: RegisterResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterUserFunction.Arn}/invocations
  RegisterOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: RegisterResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
  LoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Fn::GetAtt:
        - RestApi
        - RootResourceId
      PathPart: login
  LoginPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: LoginResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginUserFunction.Arn}/invocations
  LoginOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: LoginResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
  OrdersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Fn::GetAtt:
        - RestApi
        - RootResourceId
      PathPart: orders
  OrdersPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: OrdersResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateOrderFunction.Arn}/invocations
  OrdersGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: OrdersResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetOrdersFunction.Arn}/invocations
  OrdersOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: OrdersResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
  OrderByIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Ref: OrdersResource
      PathPart: '{orderId}'
  OrderByIdGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: OrderByIdResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: CognitoAuthorizer
      RequestParameters:
        method.request.path.orderId: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetOrderDetailsFunction.Arn}/invocations
  OrderByIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: OrderByIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
  FeedbackResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Fn::GetAtt:
        - RestApi
        - RootResourceId
      PathPart: feedback
  FeedbackPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: FeedbackResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SubmitFeedbackFunction.Arn}/invocations
  FeedbackOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: FeedbackResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
  AnalyticsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Fn::GetAtt:
        - RestApi
        - RootResourceId
      PathPart: analytics
  AnalyticsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: AnalyticsResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAnalyticsFunction.Arn}/invocations
  AnalyticsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: AnalyticsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - RegisterPostMethod
    - LoginPostMethod
    - OrdersPostMethod
    - OrdersGetMethod
    - OrderByIdGetMethod
    - FeedbackPostMethod
    - AnalyticsGetMethod
    Properties:
      RestApiId:
        Ref: RestApi
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: showcase
      RestApiId:
        Ref: RestApi
      DeploymentId:
        Ref: ApiDeployment
      MethodSettings:
      - ResourcePath: /*
        HttpMethod: '*'
        LoggingLevel: INFO
        MetricsEnabled: true
        DataTraceEnabled: false
        ThrottlingBurstLimit: 100
        ThrottlingRateLimit: 50
      TracingEnabled: true
      Tags:
      - Key: Project
        Value:
          Ref: ProjectName
  RegisterLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - RegisterUserFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/register
  LoginLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - LoginUserFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/login
  CreateOrderLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - CreateOrderFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/orders
  GetOrdersLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - GetOrdersFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/orders
  GetOrderDetailsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - GetOrderDetailsFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/orders/*
  SubmitFeedbackLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - SubmitFeedbackFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/feedback
  GetAnalyticsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - GetAnalyticsFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/analytics
Outputs:
  ApiEndpoint:
    Description: The invoke URL for the API Gateway stage (Showcase)
    Value:
      Fn::Sub: https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage.StageName}
  CognitoUserPoolId:
    Description: ID of the Cognito User Pool
    Value:
      Ref: UserPool
  CognitoUserPoolClientId:
    Description: ID of the Cognito User Pool Client
    Value:
      Ref: UserPoolClient
  CustomersTableName:
    Description: Name of the DynamoDB table for Customers
    Value:
      Ref: CustomersTable
  OrdersTableName:
    Description: Name of the DynamoDB table for Orders
    Value:
      Ref: OrdersTable
  FeedbackTableName:
    Description: Name of the DynamoDB table for Feedback
    Value:
      Ref: FeedbackTable
  PaymentStateMachineArn:
    Description: ARN of the placeholder Payment Processing Step Functions State Machine
    Value:
      Ref: PaymentProcessingStateMachine
  RedisCacheEndpoint:
    Description: Endpoint address for the ElastiCache Redis cluster
    Value:
      Fn::GetAtt:
      - RedisCacheCluster
      - RedisEndpoint.Address
  RedisCachePort:
    Description: Endpoint port for the ElastiCache Redis cluster
    Value:
      Fn::GetAtt:
      - RedisCacheCluster
      - RedisEndpoint.Port
  AnalyticsDBEndpoint:
    Description: Endpoint address for the RDS PostgreSQL analytics database
    Value:
      Fn::GetAtt:
      - AnalyticsDBInstance
      - Endpoint.Address
  AnalyticsDBPort:
    Description: Endpoint port for the RDS PostgreSQL analytics database
    Value:
      Fn::GetAtt:
      - AnalyticsDBInstance
      - Endpoint.Port
  AnalyticsDBName:
    Description: Name of the RDS PostgreSQL analytics database
    Value:
      Fn::Sub: ${ProjectName}AnalyticsDB
  DBPasswordSecretArn:
    Description: ARN of the Secrets Manager secret holding the RDS master password
    Value:
      Ref: DBPasswordSecret
  VpcId:
    Description: ID of the created VPC
    Value:
      Ref: VPC
  PublicSubnetIds:
    Description: IDs of the public subnets
    Value:
      Fn::Join:
      - ','
      - - Ref: PublicSubnetA
        - Ref: PublicSubnetB
  LambdaSecurityGroupId:
    Description: ID of the Security Group used by Lambda functions
    Value:
      Ref: LambdaSecurityGroup
