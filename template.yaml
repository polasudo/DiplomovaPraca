AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - AWS::Serverless-2016-10-31

Description: Test CICD

Parameters:
  ServiceName:
    Type: String
    Default: Test-cicd
  DATE:
    Type: String
    Default: 2024-04-01
  EnvStage:
    Type: String
    Default: rnd-v1

Globals:
  Function:
    MemorySize: 512
    Timeout: 900
    Environment:
      Variables:
        SERVICE_NAME: !Ref ServiceName
        DATE: !Ref DATE
        S3_BUCKET: !Sub ${ServiceName}-${EnvStage}
        DYNAMODB_TABLE: !Ref ServiceName

Resources:
  #ADJUST POLICIES BASED ON YOUR NEEDS
  LambdaExecutionRoleForUnifiedFunction:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam:<AccountId>:aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaUnifiedFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # DynamoDB Permissions
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: '*'
              # S3 Permissions
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${ServiceName}-${EnvStage}'
                  - !Sub 'arn:aws:s3:::${ServiceName}-${EnvStage}/*'
              # SQS Permissions
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ListQueues
                Resource:
                  - !GetAtt CICDSQSQueue.Arn
              # SNS Permissions
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sns:Subscribe
                Resource:
                  - !Ref CICDSNSTopic
              # Lambda Invocation Permissions
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'
              # X-Ray Permissions
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'

  # DynamoDB Table with Stream Enabled
  DynamoDBStream:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ServiceName}-stream'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: state_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: state_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      SSESpecification:
        SSEEnabled: True

  # SQS Queue
  CICDSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ServiceName}-queue'
      VisibilityTimeout: 910

  # SNS Topic
  CICDSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ServiceName}-topic'

  CICDSNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !Ref CICDSNSTopic
      Endpoint: !GetAtt CICDSQSQueue.Arn

  # API Gateway
  CICDAPIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ServiceName}-api'
      Description: API for Test CICD

  CICDAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt CICDAPIGateway.RootResourceId
      PathPart: cicd
      RestApiId: !Ref CICDAPIGateway

  CICDAPIAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      AuthorizationType: NONE
      ResourceId: !Ref CICDAPIResource
      RestApiId: !Ref CICDAPIGateway
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
          - { }

  CICDAPIGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/*"
        - { ApiId: !Ref CICDAPIGateway }

  # Unified Lambda Function
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-handler'
      CodeUri: src/lambda_handler
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRoleForUnifiedFunction.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Sub '${ServiceName}-stream'
          S3_BUCKET: !Sub '${ServiceName}-${EnvStage}'
          SQS_QUEUE_URL: !Ref CICDSQSQueue
          SNS_TOPIC_ARN: !Ref CICDSNSTopic
      ReservedConcurrentExecutions: 2
      Tracing: Active

  # Permissions for Event Sources
  LambdaPermissionForDynamoDB:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: dynamodb.amazonaws.com
      SourceArn: !GetAtt DynamoDBStream.StreamArn

  LambdaPermissionForEventBridge:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/${ServiceName}-*'

  # IAM Roles for Each Lambda Function
  LambdaExecutionRoleCommon:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CommonServicePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sns:Subscribe
                Resource: !Ref CICDSNSTopic
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ListQueues
                Resource: !GetAtt CICDSQSQueue.Arn
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${ServiceName}-${EnvStage}'
                  - !Sub 'arn:aws:s3:::${ServiceName}-${EnvStage}/*'
              - Effect: Allow
                Action:
                  - dynamodb:GetRecords
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:PutItem
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                Resource: '*'
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'

  # SNS Trigger Lambda
  LambdaSNSProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-SNSProcessor'
      CodeUri: src/sns_processor
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRoleCommon.Arn
      ReservedConcurrentExecutions: 2
      Tracing: Active
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref CICDSNSTopic

  # SQS Trigger Lambda
  LambdaSQSProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-SQSProcessor'
      CodeUri: src/sqs_processor
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRoleCommon.Arn
      ReservedConcurrentExecutions: 2
      Tracing: Active
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt CICDSQSQueue.Arn
            BatchSize: 10

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ServiceName}-${EnvStage}'

  # S3 Trigger Lambda
  LambdaS3ProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-S3Processor'
      CodeUri: src/s3_processor
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRoleCommon.Arn
      ReservedConcurrentExecutions: 2
      Tracing: Active
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref S3Bucket
            Events:
              - s3:ObjectCreated:*
            Filter:
                S3Key:
                  Rules:
                  - Name: prefix
                    Value: 'data/'


  # DynamoDB Stream Trigger Lambda
  LambdaDynamoDBStreamProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-DynamoDBStreamProcessor'
      CodeUri: src/dynamodb_stream_processor
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRoleCommon.Arn
      ReservedConcurrentExecutions: 2
      Tracing: Active
      Events:
        DynamoDBStreamEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt DynamoDBStream.StreamArn
            StartingPosition: LATEST
            BatchSize: 100

  # API Gateway Trigger Lambda (Integrated via Events)
  LambdaAPIProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-APIProcessor'
      CodeUri: src/api_processor
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRoleCommon.Arn
      ReservedConcurrentExecutions: 2
      Tracing: Active
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref CICDAPIGateway
            Path: /cicd
            Method: ANY
